
embeddedC_gpio1234.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001190  08001190  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08001190  08001190  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001190  08001190  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          0000016c  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001e39  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000083e  00000000  00000000  00021efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000190  00000000  00000000  00022740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000012a  00000000  00000000  000228d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b656  00000000  00000000  000229fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000266e  00000000  00000000  0003e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00097eb5  00000000  00000000  000406be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a0c  00000000  00000000  000d8574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000d8f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000050 	.word	0x20000050
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001010 	.word	0x08001010

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000054 	.word	0x20000054
 80001ec:	08001010 	.word	0x08001010

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
#include "uart.h"
#include "systick.h"
#include <stdio.h>

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af00      	add	r7, sp, #0
    /* Initialize SysTick and UART */
    SysTick_Init();
 8000296:	f000 f891 	bl	80003bc <SysTick_Init>
    UART_Init(115200);
 800029a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800029e:	f000 f8c7 	bl	8000430 <UART_Init>

    /* Test 1: Basic send functionality */
    UART_SendString("\r\n=== UART Driver Phase 1.2 Demo ===\r\n");
 80002a2:	4822      	ldr	r0, [pc, #136]	; (800032c <main+0x9c>)
 80002a4:	f000 f952 	bl	800054c <UART_SendString>
    UART_SendString("UART initialized successfully!\r\n");
 80002a8:	4821      	ldr	r0, [pc, #132]	; (8000330 <main+0xa0>)
 80002aa:	f000 f94f 	bl	800054c <UART_SendString>

    /* Test 2: Printf-style formatting */
    char buffer[100];
    sprintf(buffer, "System Clock: %lu Hz\r\n", 16000000UL);
 80002ae:	463b      	mov	r3, r7
 80002b0:	4a20      	ldr	r2, [pc, #128]	; (8000334 <main+0xa4>)
 80002b2:	4921      	ldr	r1, [pc, #132]	; (8000338 <main+0xa8>)
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fa0f 	bl	80006d8 <siprintf>
    UART_SendString(buffer);
 80002ba:	463b      	mov	r3, r7
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f945 	bl	800054c <UART_SendString>

    /* Test 3: Bidirectional test */
    UART_SendString("\r\nType a character and it will be echoed back: ");
 80002c2:	481e      	ldr	r0, [pc, #120]	; (800033c <main+0xac>)
 80002c4:	f000 f942 	bl	800054c <UART_SendString>

    while(1)
    {
        if(UART_IsDataAvailable()) {
 80002c8:	f000 f966 	bl	8000598 <UART_IsDataAvailable>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d023      	beq.n	800031a <main+0x8a>
            uint8_t received = UART_ReceiveByte();
 80002d2:	f000 f973 	bl	80005bc <UART_ReceiveByte>
 80002d6:	4603      	mov	r3, r0
 80002d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            // Echo back with formatting
            sprintf(buffer, "\r\nYou typed: '%c' (ASCII: %d)\r\n", received, received);
 80002dc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80002e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80002e4:	4638      	mov	r0, r7
 80002e6:	4916      	ldr	r1, [pc, #88]	; (8000340 <main+0xb0>)
 80002e8:	f000 f9f6 	bl	80006d8 <siprintf>
            UART_SendString(buffer);
 80002ec:	463b      	mov	r3, r7
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f92c 	bl	800054c <UART_SendString>

            // Simple command handling
            if(received == 'q' || received == 'Q') {
 80002f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80002f8:	2b71      	cmp	r3, #113	; 0x71
 80002fa:	d003      	beq.n	8000304 <main+0x74>
 80002fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000300:	2b51      	cmp	r3, #81	; 0x51
 8000302:	d107      	bne.n	8000314 <main+0x84>
                UART_SendString("Exiting to Phase 1.3...\r\n");
 8000304:	480f      	ldr	r0, [pc, #60]	; (8000344 <main+0xb4>)
 8000306:	f000 f921 	bl	800054c <UART_SendString>
                break;
 800030a:	bf00      	nop
        /* This delay prevents CPU overload while waiting */
        SysTick_Delay(10);
    }

    /* Move to Phase 1.3 setup */
    UART_SendString("\r\n=== Ready for Phase 1.3: Simple Task Scheduler ===\r\n");
 800030c:	480e      	ldr	r0, [pc, #56]	; (8000348 <main+0xb8>)
 800030e:	f000 f91d 	bl	800054c <UART_SendString>
 8000312:	e006      	b.n	8000322 <main+0x92>
            UART_SendString("Type another character (or 'q' to quit): ");
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <main+0xbc>)
 8000316:	f000 f919 	bl	800054c <UART_SendString>
        SysTick_Delay(10);
 800031a:	200a      	movs	r0, #10
 800031c:	f000 f870 	bl	8000400 <SysTick_Delay>
        if(UART_IsDataAvailable()) {
 8000320:	e7d2      	b.n	80002c8 <main+0x38>

    while(1) {
        /* Main loop for Phase 1.3 */
        SysTick_Delay(100);
 8000322:	2064      	movs	r0, #100	; 0x64
 8000324:	f000 f86c 	bl	8000400 <SysTick_Delay>
 8000328:	e7fb      	b.n	8000322 <main+0x92>
 800032a:	bf00      	nop
 800032c:	08001028 	.word	0x08001028
 8000330:	08001050 	.word	0x08001050
 8000334:	00f42400 	.word	0x00f42400
 8000338:	08001074 	.word	0x08001074
 800033c:	0800108c 	.word	0x0800108c
 8000340:	080010bc 	.word	0x080010bc
 8000344:	080010dc 	.word	0x080010dc
 8000348:	08001124 	.word	0x08001124
 800034c:	080010f8 	.word	0x080010f8

08000350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000358:	4a14      	ldr	r2, [pc, #80]	; (80003ac <_sbrk+0x5c>)
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <_sbrk+0x60>)
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <_sbrk+0x64>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d102      	bne.n	8000372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <_sbrk+0x64>)
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <_sbrk+0x68>)
 8000370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <_sbrk+0x64>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	693a      	ldr	r2, [r7, #16]
 800037c:	429a      	cmp	r2, r3
 800037e:	d207      	bcs.n	8000390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000380:	f000 f9ca 	bl	8000718 <__errno>
 8000384:	4603      	mov	r3, r0
 8000386:	220c      	movs	r2, #12
 8000388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	e009      	b.n	80003a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <_sbrk+0x64>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <_sbrk+0x64>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <_sbrk+0x64>)
 80003a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20030000 	.word	0x20030000
 80003b0:	00000400 	.word	0x00000400
 80003b4:	2000006c 	.word	0x2000006c
 80003b8:	200001c0 	.word	0x200001c0

080003bc <SysTick_Init>:
#include "stm32f4xx.h"

/* Global SysTick counter - increments every 1ms */
volatile uint32_t systick_counter = 0;

void SysTick_Init(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    /* Configure SysTick for 1ms intervals */
    /* Assuming 16MHz system clock (default HSI) */

    /* Load reload value for 1ms delay */
    /* SysTick operates at processor clock speed */
    SysTick->LOAD = (16000000 / 1000) - 1;  /* 16000 ticks for 1ms */
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <SysTick_Init+0x24>)
 80003c2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003c6:	605a      	str	r2, [r3, #4]

    /* Reset current value register */
    SysTick->VAL = 0;
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Init+0x24>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
    /* Configure SysTick Control Register:
     * - CLKSOURCE = 1 (processor clock)
     * - TICKINT = 1 (enable interrupt)
     * - ENABLE = 1 (enable counter)
     */
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Init+0x24>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
    /* Increment counter every 1ms */
    systick_counter++;
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <SysTick_Handler+0x18>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	4a03      	ldr	r2, [pc, #12]	; (80003fc <SysTick_Handler+0x18>)
 80003f0:	6013      	str	r3, [r2, #0]
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	20000070 	.word	0x20000070

08000400 <SysTick_Delay>:

void SysTick_Delay(uint32_t delay_ms) {
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    uint32_t start_time = systick_counter;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <SysTick_Delay+0x2c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	60fb      	str	r3, [r7, #12]

    /* Wait until the delay time has passed */
    while ((systick_counter - start_time) < delay_ms) {
 800040e:	bf00      	nop
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <SysTick_Delay+0x2c>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	d8f8      	bhi.n	8000410 <SysTick_Delay+0x10>
        /* Wait for the delay */
    }
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000070 	.word	0x20000070

08000430 <UART_Init>:
 * @file uart.c
 * @brief UART driver implementation for STM32F429ZI
 */

void UART_Init(uint32_t baud)
{
 8000430:	b480      	push	{r7}
 8000432:	b087      	sub	sp, #28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    /* Enable clocks and configure GPIO pins as before */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000438:	4b40      	ldr	r3, [pc, #256]	; (800053c <UART_Init+0x10c>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a3f      	ldr	r2, [pc, #252]	; (800053c <UART_Init+0x10c>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <UART_Init+0x10c>)
 8000446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000448:	4a3c      	ldr	r2, [pc, #240]	; (800053c <UART_Init+0x10c>)
 800044a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800044e:	6413      	str	r3, [r2, #64]	; 0x40
    GPIOD->MODER &= ~(GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0);
 8000450:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <UART_Init+0x110>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a3a      	ldr	r2, [pc, #232]	; (8000540 <UART_Init+0x110>)
 8000456:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 800045a:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1);
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <UART_Init+0x110>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a37      	ldr	r2, [pc, #220]	; (8000540 <UART_Init+0x110>)
 8000462:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000466:	6013      	str	r3, [r2, #0]
    GPIOD->AFR[1] &= ~(0xF << 0); /* Clear PD8 AF bits */
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <UART_Init+0x110>)
 800046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046c:	4a34      	ldr	r2, [pc, #208]	; (8000540 <UART_Init+0x110>)
 800046e:	f023 030f 	bic.w	r3, r3, #15
 8000472:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOD->AFR[1] &= ~(0xF << 4); /* Clear PD9 AF bits */
 8000474:	4b32      	ldr	r3, [pc, #200]	; (8000540 <UART_Init+0x110>)
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	4a31      	ldr	r2, [pc, #196]	; (8000540 <UART_Init+0x110>)
 800047a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800047e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOD->AFR[1] |= (7 << 0); /* PD8 = AF7 (USART3_TX) */
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <UART_Init+0x110>)
 8000482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000484:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <UART_Init+0x110>)
 8000486:	f043 0307 	orr.w	r3, r3, #7
 800048a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOD->AFR[1] |= (7 << 4); /* PD9 = AF7 (USART3_RX) */
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <UART_Init+0x110>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	4a2b      	ldr	r2, [pc, #172]	; (8000540 <UART_Init+0x110>)
 8000492:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000496:	6253      	str	r3, [r2, #36]	; 0x24

    /* Disable USART before configuration */
    USART3->CR1 &= ~USART_CR1_UE;
 8000498:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <UART_Init+0x114>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a29      	ldr	r2, [pc, #164]	; (8000544 <UART_Init+0x114>)
 800049e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004a2:	60d3      	str	r3, [r2, #12]

    /* Calculate BRR value using integer math only (more reliable than float) */
    uint32_t divider = 16000000 / baud;
 80004a4:	4a28      	ldr	r2, [pc, #160]	; (8000548 <UART_Init+0x118>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ac:	60fb      	str	r3, [r7, #12]
    uint32_t mantissa = divider / 16;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	091b      	lsrs	r3, r3, #4
 80004b2:	617b      	str	r3, [r7, #20]
    uint32_t fraction = divider % 16;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	613b      	str	r3, [r7, #16]

    /* Apply rounding if needed */
    /* The (divider * 16) % 16 calculation gives us the remaining fractional part */
    /* If it's ≥ 0.5, we round up */
    uint32_t remainder = (16000000 % baud) * 16 / baud;
 80004bc:	4b22      	ldr	r3, [pc, #136]	; (8000548 <UART_Init+0x118>)
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	fb01 f202 	mul.w	r2, r1, r2
 80004ca:	1a9b      	subs	r3, r3, r2
 80004cc:	011a      	lsls	r2, r3, #4
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d4:	60bb      	str	r3, [r7, #8]
    if (remainder >= 8) {
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	2b07      	cmp	r3, #7
 80004da:	d90b      	bls.n	80004f4 <UART_Init+0xc4>
        if (fraction < 15) {
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	2b0e      	cmp	r3, #14
 80004e0:	d803      	bhi.n	80004ea <UART_Init+0xba>
            fraction++;
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	3301      	adds	r3, #1
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	e004      	b.n	80004f4 <UART_Init+0xc4>
        } else {
            fraction = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
            mantissa++;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
        }
    }

    /* Set BRR register value */
    USART3->BRR = (mantissa << 4) | fraction;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	011a      	lsls	r2, r3, #4
 80004f8:	4912      	ldr	r1, [pc, #72]	; (8000544 <UART_Init+0x114>)
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	608b      	str	r3, [r1, #8]

    /* Configure word length (8 bits) and no parity */
    USART3->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <UART_Init+0x114>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <UART_Init+0x114>)
 8000506:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800050a:	60d3      	str	r3, [r2, #12]

    /* Configure stop bits (1 stop bit) */
    USART3->CR2 &= ~USART_CR2_STOP;
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <UART_Init+0x114>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <UART_Init+0x114>)
 8000512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000516:	6113      	str	r3, [r2, #16]

    /* Enable transmitter and receiver */
    USART3->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <UART_Init+0x114>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <UART_Init+0x114>)
 800051e:	f043 030c 	orr.w	r3, r3, #12
 8000522:	60d3      	str	r3, [r2, #12]

    /* Enable USART */
    USART3->CR1 |= USART_CR1_UE;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <UART_Init+0x114>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <UART_Init+0x114>)
 800052a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800052e:	60d3      	str	r3, [r2, #12]
}
 8000530:	bf00      	nop
 8000532:	371c      	adds	r7, #28
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	40023800 	.word	0x40023800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40004800 	.word	0x40004800
 8000548:	00f42400 	.word	0x00f42400

0800054c <UART_SendString>:
void UART_SendString(const char* str) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    /* Send characters until null terminator is reached */
    while (*str) {
 8000554:	e00c      	b.n	8000570 <UART_SendString+0x24>
        /* Wait until transmit data register is empty */
        while (!(USART3->SR & USART_SR_TXE));
 8000556:	bf00      	nop
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <UART_SendString+0x48>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0f9      	beq.n	8000558 <UART_SendString+0xc>

        /* Send the character */
        USART3->DR = *str++;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <UART_SendString+0x48>)
 800056e:	605a      	str	r2, [r3, #4]
    while (*str) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1ee      	bne.n	8000556 <UART_SendString+0xa>
    }

    /* Wait until transmission is complete */
    while (!(USART3->SR & USART_SR_TC));
 8000578:	bf00      	nop
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <UART_SendString+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f9      	beq.n	800057a <UART_SendString+0x2e>
}
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40004800 	.word	0x40004800

08000598 <UART_IsDataAvailable>:
        buffer[i] = (char)(USART3->DR & 0xFF);
    }

    return UART_OK;
}
bool UART_IsDataAvailable(void) {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
    return (USART3->SR & USART_SR_RXNE) ? true : false;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <UART_IsDataAvailable+0x20>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf14      	ite	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	2300      	moveq	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40004800 	.word	0x40004800

080005bc <UART_ReceiveByte>:

    return UART_OK;
}

/* Returns 0 on timeout - check UART_IsDataAvailable() first for safety */
uint8_t UART_ReceiveByte(void) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
    uint32_t startTime = systick_counter;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <UART_ReceiveByte+0x40>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	607b      	str	r3, [r7, #4]
    while (!(USART3->SR & USART_SR_RXNE)) {
 80005c8:	e008      	b.n	80005dc <UART_ReceiveByte+0x20>
        if ((systick_counter - startTime) > 1000) {
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <UART_ReceiveByte+0x40>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d6:	d901      	bls.n	80005dc <UART_ReceiveByte+0x20>
            return 0;  /* Timeout - could be valid data or error */
 80005d8:	2300      	movs	r3, #0
 80005da:	e008      	b.n	80005ee <UART_ReceiveByte+0x32>
    while (!(USART3->SR & USART_SR_RXNE)) {
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <UART_ReceiveByte+0x44>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f0      	beq.n	80005ca <UART_ReceiveByte+0xe>
        }
    }
    return (uint8_t)(USART3->DR & 0xFF);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <UART_ReceiveByte+0x44>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000070 	.word	0x20000070
 8000600:	40004800 	.word	0x40004800

08000604 <USART3_IRQHandler>:
    // Add another small delay to ensure buffer is clear
    SysTick_Delay(50);
}
/* Dummy interrupt handlers for testing */
/* Modified interrupt handler for testing */
void USART3_IRQHandler(void) {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
    /* This is a more correct way to handle interrupts */

    /* Handle RXNE interrupt */
    if((USART3->SR & USART_SR_RXNE) && (USART3->CR1 & USART_CR1_RXNEIE)) {
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <USART3_IRQHandler+0x7c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 0320 	and.w	r3, r3, #32
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00a      	beq.n	800062c <USART3_IRQHandler+0x28>
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <USART3_IRQHandler+0x7c>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <USART3_IRQHandler+0x28>
        volatile uint8_t dummy = USART3->DR;  // Read DR to clear RXNE
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <USART3_IRQHandler+0x7c>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	71fb      	strb	r3, [r7, #7]
        (void)dummy;
 800062a:	79fb      	ldrb	r3, [r7, #7]
    }

    /* Handle TC interrupt */
    if((USART3->SR & USART_SR_TC) && (USART3->CR1 & USART_CR1_TCIE)) {
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <USART3_IRQHandler+0x7c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <USART3_IRQHandler+0x4c>
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <USART3_IRQHandler+0x7c>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d005      	beq.n	8000650 <USART3_IRQHandler+0x4c>
        /* TC flag is cleared by reading SR and then writing to DR */
        /* But in this test, we don't want to write data */
        /* So we'll disable the TC interrupt to prevent the hang */
        USART3->CR1 &= ~USART_CR1_TCIE;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <USART3_IRQHandler+0x7c>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <USART3_IRQHandler+0x7c>)
 800064a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800064e:	60d3      	str	r3, [r2, #12]
    }

    /* Handle TXE interrupt */
    if((USART3->SR & USART_SR_TXE) && (USART3->CR1 & USART_CR1_TXEIE)) {
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <USART3_IRQHandler+0x7c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00b      	beq.n	8000674 <USART3_IRQHandler+0x70>
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <USART3_IRQHandler+0x7c>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <USART3_IRQHandler+0x70>
        /* Disable TXE interrupt to prevent continuous firing */
        USART3->CR1 &= ~USART_CR1_TXEIE;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <USART3_IRQHandler+0x7c>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <USART3_IRQHandler+0x7c>)
 800066e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000672:	60d3      	str	r3, [r2, #12]
    }
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40004800 	.word	0x40004800

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b2:	f000 f837 	bl	8000724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fdeb 	bl	8000290 <main>

080006ba <LoopForever>:

LoopForever:
  b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80006c8:	08001198 	.word	0x08001198
  ldr r2, =_sbss
 80006cc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80006d0:	200001bc 	.word	0x200001bc

080006d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC_IRQHandler>
	...

080006d8 <siprintf>:
 80006d8:	b40e      	push	{r1, r2, r3}
 80006da:	b500      	push	{lr}
 80006dc:	b09c      	sub	sp, #112	; 0x70
 80006de:	ab1d      	add	r3, sp, #116	; 0x74
 80006e0:	9002      	str	r0, [sp, #8]
 80006e2:	9006      	str	r0, [sp, #24]
 80006e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <siprintf+0x38>)
 80006ea:	9107      	str	r1, [sp, #28]
 80006ec:	9104      	str	r1, [sp, #16]
 80006ee:	4909      	ldr	r1, [pc, #36]	; (8000714 <siprintf+0x3c>)
 80006f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80006f4:	9105      	str	r1, [sp, #20]
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	a902      	add	r1, sp, #8
 80006fc:	f000 f98a 	bl	8000a14 <_svfiprintf_r>
 8000700:	9b02      	ldr	r3, [sp, #8]
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	b01c      	add	sp, #112	; 0x70
 8000708:	f85d eb04 	ldr.w	lr, [sp], #4
 800070c:	b003      	add	sp, #12
 800070e:	4770      	bx	lr
 8000710:	2000004c 	.word	0x2000004c
 8000714:	ffff0208 	.word	0xffff0208

08000718 <__errno>:
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <__errno+0x8>)
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	2000004c 	.word	0x2000004c

08000724 <__libc_init_array>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4d0d      	ldr	r5, [pc, #52]	; (800075c <__libc_init_array+0x38>)
 8000728:	4c0d      	ldr	r4, [pc, #52]	; (8000760 <__libc_init_array+0x3c>)
 800072a:	1b64      	subs	r4, r4, r5
 800072c:	10a4      	asrs	r4, r4, #2
 800072e:	2600      	movs	r6, #0
 8000730:	42a6      	cmp	r6, r4
 8000732:	d109      	bne.n	8000748 <__libc_init_array+0x24>
 8000734:	4d0b      	ldr	r5, [pc, #44]	; (8000764 <__libc_init_array+0x40>)
 8000736:	4c0c      	ldr	r4, [pc, #48]	; (8000768 <__libc_init_array+0x44>)
 8000738:	f000 fc6a 	bl	8001010 <_init>
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	10a4      	asrs	r4, r4, #2
 8000740:	2600      	movs	r6, #0
 8000742:	42a6      	cmp	r6, r4
 8000744:	d105      	bne.n	8000752 <__libc_init_array+0x2e>
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f855 3b04 	ldr.w	r3, [r5], #4
 800074c:	4798      	blx	r3
 800074e:	3601      	adds	r6, #1
 8000750:	e7ee      	b.n	8000730 <__libc_init_array+0xc>
 8000752:	f855 3b04 	ldr.w	r3, [r5], #4
 8000756:	4798      	blx	r3
 8000758:	3601      	adds	r6, #1
 800075a:	e7f2      	b.n	8000742 <__libc_init_array+0x1e>
 800075c:	08001190 	.word	0x08001190
 8000760:	08001190 	.word	0x08001190
 8000764:	08001190 	.word	0x08001190
 8000768:	08001194 	.word	0x08001194

0800076c <__retarget_lock_acquire_recursive>:
 800076c:	4770      	bx	lr

0800076e <__retarget_lock_release_recursive>:
 800076e:	4770      	bx	lr

08000770 <_free_r>:
 8000770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000772:	2900      	cmp	r1, #0
 8000774:	d044      	beq.n	8000800 <_free_r+0x90>
 8000776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800077a:	9001      	str	r0, [sp, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	f1a1 0404 	sub.w	r4, r1, #4
 8000782:	bfb8      	it	lt
 8000784:	18e4      	addlt	r4, r4, r3
 8000786:	f000 f8df 	bl	8000948 <__malloc_lock>
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <_free_r+0x94>)
 800078c:	9801      	ldr	r0, [sp, #4]
 800078e:	6813      	ldr	r3, [r2, #0]
 8000790:	b933      	cbnz	r3, 80007a0 <_free_r+0x30>
 8000792:	6063      	str	r3, [r4, #4]
 8000794:	6014      	str	r4, [r2, #0]
 8000796:	b003      	add	sp, #12
 8000798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800079c:	f000 b8da 	b.w	8000954 <__malloc_unlock>
 80007a0:	42a3      	cmp	r3, r4
 80007a2:	d908      	bls.n	80007b6 <_free_r+0x46>
 80007a4:	6825      	ldr	r5, [r4, #0]
 80007a6:	1961      	adds	r1, r4, r5
 80007a8:	428b      	cmp	r3, r1
 80007aa:	bf01      	itttt	eq
 80007ac:	6819      	ldreq	r1, [r3, #0]
 80007ae:	685b      	ldreq	r3, [r3, #4]
 80007b0:	1949      	addeq	r1, r1, r5
 80007b2:	6021      	streq	r1, [r4, #0]
 80007b4:	e7ed      	b.n	8000792 <_free_r+0x22>
 80007b6:	461a      	mov	r2, r3
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	b10b      	cbz	r3, 80007c0 <_free_r+0x50>
 80007bc:	42a3      	cmp	r3, r4
 80007be:	d9fa      	bls.n	80007b6 <_free_r+0x46>
 80007c0:	6811      	ldr	r1, [r2, #0]
 80007c2:	1855      	adds	r5, r2, r1
 80007c4:	42a5      	cmp	r5, r4
 80007c6:	d10b      	bne.n	80007e0 <_free_r+0x70>
 80007c8:	6824      	ldr	r4, [r4, #0]
 80007ca:	4421      	add	r1, r4
 80007cc:	1854      	adds	r4, r2, r1
 80007ce:	42a3      	cmp	r3, r4
 80007d0:	6011      	str	r1, [r2, #0]
 80007d2:	d1e0      	bne.n	8000796 <_free_r+0x26>
 80007d4:	681c      	ldr	r4, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	6053      	str	r3, [r2, #4]
 80007da:	440c      	add	r4, r1
 80007dc:	6014      	str	r4, [r2, #0]
 80007de:	e7da      	b.n	8000796 <_free_r+0x26>
 80007e0:	d902      	bls.n	80007e8 <_free_r+0x78>
 80007e2:	230c      	movs	r3, #12
 80007e4:	6003      	str	r3, [r0, #0]
 80007e6:	e7d6      	b.n	8000796 <_free_r+0x26>
 80007e8:	6825      	ldr	r5, [r4, #0]
 80007ea:	1961      	adds	r1, r4, r5
 80007ec:	428b      	cmp	r3, r1
 80007ee:	bf04      	itt	eq
 80007f0:	6819      	ldreq	r1, [r3, #0]
 80007f2:	685b      	ldreq	r3, [r3, #4]
 80007f4:	6063      	str	r3, [r4, #4]
 80007f6:	bf04      	itt	eq
 80007f8:	1949      	addeq	r1, r1, r5
 80007fa:	6021      	streq	r1, [r4, #0]
 80007fc:	6054      	str	r4, [r2, #4]
 80007fe:	e7ca      	b.n	8000796 <_free_r+0x26>
 8000800:	b003      	add	sp, #12
 8000802:	bd30      	pop	{r4, r5, pc}
 8000804:	200001b4 	.word	0x200001b4

08000808 <sbrk_aligned>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	4e0e      	ldr	r6, [pc, #56]	; (8000844 <sbrk_aligned+0x3c>)
 800080c:	460c      	mov	r4, r1
 800080e:	6831      	ldr	r1, [r6, #0]
 8000810:	4605      	mov	r5, r0
 8000812:	b911      	cbnz	r1, 800081a <sbrk_aligned+0x12>
 8000814:	f000 fba6 	bl	8000f64 <_sbrk_r>
 8000818:	6030      	str	r0, [r6, #0]
 800081a:	4621      	mov	r1, r4
 800081c:	4628      	mov	r0, r5
 800081e:	f000 fba1 	bl	8000f64 <_sbrk_r>
 8000822:	1c43      	adds	r3, r0, #1
 8000824:	d00a      	beq.n	800083c <sbrk_aligned+0x34>
 8000826:	1cc4      	adds	r4, r0, #3
 8000828:	f024 0403 	bic.w	r4, r4, #3
 800082c:	42a0      	cmp	r0, r4
 800082e:	d007      	beq.n	8000840 <sbrk_aligned+0x38>
 8000830:	1a21      	subs	r1, r4, r0
 8000832:	4628      	mov	r0, r5
 8000834:	f000 fb96 	bl	8000f64 <_sbrk_r>
 8000838:	3001      	adds	r0, #1
 800083a:	d101      	bne.n	8000840 <sbrk_aligned+0x38>
 800083c:	f04f 34ff 	mov.w	r4, #4294967295
 8000840:	4620      	mov	r0, r4
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	200001b8 	.word	0x200001b8

08000848 <_malloc_r>:
 8000848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800084c:	1ccd      	adds	r5, r1, #3
 800084e:	f025 0503 	bic.w	r5, r5, #3
 8000852:	3508      	adds	r5, #8
 8000854:	2d0c      	cmp	r5, #12
 8000856:	bf38      	it	cc
 8000858:	250c      	movcc	r5, #12
 800085a:	2d00      	cmp	r5, #0
 800085c:	4607      	mov	r7, r0
 800085e:	db01      	blt.n	8000864 <_malloc_r+0x1c>
 8000860:	42a9      	cmp	r1, r5
 8000862:	d905      	bls.n	8000870 <_malloc_r+0x28>
 8000864:	230c      	movs	r3, #12
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	2600      	movs	r6, #0
 800086a:	4630      	mov	r0, r6
 800086c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000870:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000944 <_malloc_r+0xfc>
 8000874:	f000 f868 	bl	8000948 <__malloc_lock>
 8000878:	f8d8 3000 	ldr.w	r3, [r8]
 800087c:	461c      	mov	r4, r3
 800087e:	bb5c      	cbnz	r4, 80008d8 <_malloc_r+0x90>
 8000880:	4629      	mov	r1, r5
 8000882:	4638      	mov	r0, r7
 8000884:	f7ff ffc0 	bl	8000808 <sbrk_aligned>
 8000888:	1c43      	adds	r3, r0, #1
 800088a:	4604      	mov	r4, r0
 800088c:	d155      	bne.n	800093a <_malloc_r+0xf2>
 800088e:	f8d8 4000 	ldr.w	r4, [r8]
 8000892:	4626      	mov	r6, r4
 8000894:	2e00      	cmp	r6, #0
 8000896:	d145      	bne.n	8000924 <_malloc_r+0xdc>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d048      	beq.n	800092e <_malloc_r+0xe6>
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	4631      	mov	r1, r6
 80008a0:	4638      	mov	r0, r7
 80008a2:	eb04 0903 	add.w	r9, r4, r3
 80008a6:	f000 fb5d 	bl	8000f64 <_sbrk_r>
 80008aa:	4581      	cmp	r9, r0
 80008ac:	d13f      	bne.n	800092e <_malloc_r+0xe6>
 80008ae:	6821      	ldr	r1, [r4, #0]
 80008b0:	1a6d      	subs	r5, r5, r1
 80008b2:	4629      	mov	r1, r5
 80008b4:	4638      	mov	r0, r7
 80008b6:	f7ff ffa7 	bl	8000808 <sbrk_aligned>
 80008ba:	3001      	adds	r0, #1
 80008bc:	d037      	beq.n	800092e <_malloc_r+0xe6>
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	442b      	add	r3, r5
 80008c2:	6023      	str	r3, [r4, #0]
 80008c4:	f8d8 3000 	ldr.w	r3, [r8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d038      	beq.n	800093e <_malloc_r+0xf6>
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	42a2      	cmp	r2, r4
 80008d0:	d12b      	bne.n	800092a <_malloc_r+0xe2>
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	e00f      	b.n	80008f8 <_malloc_r+0xb0>
 80008d8:	6822      	ldr	r2, [r4, #0]
 80008da:	1b52      	subs	r2, r2, r5
 80008dc:	d41f      	bmi.n	800091e <_malloc_r+0xd6>
 80008de:	2a0b      	cmp	r2, #11
 80008e0:	d917      	bls.n	8000912 <_malloc_r+0xca>
 80008e2:	1961      	adds	r1, r4, r5
 80008e4:	42a3      	cmp	r3, r4
 80008e6:	6025      	str	r5, [r4, #0]
 80008e8:	bf18      	it	ne
 80008ea:	6059      	strne	r1, [r3, #4]
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	bf08      	it	eq
 80008f0:	f8c8 1000 	streq.w	r1, [r8]
 80008f4:	5162      	str	r2, [r4, r5]
 80008f6:	604b      	str	r3, [r1, #4]
 80008f8:	4638      	mov	r0, r7
 80008fa:	f104 060b 	add.w	r6, r4, #11
 80008fe:	f000 f829 	bl	8000954 <__malloc_unlock>
 8000902:	f026 0607 	bic.w	r6, r6, #7
 8000906:	1d23      	adds	r3, r4, #4
 8000908:	1af2      	subs	r2, r6, r3
 800090a:	d0ae      	beq.n	800086a <_malloc_r+0x22>
 800090c:	1b9b      	subs	r3, r3, r6
 800090e:	50a3      	str	r3, [r4, r2]
 8000910:	e7ab      	b.n	800086a <_malloc_r+0x22>
 8000912:	42a3      	cmp	r3, r4
 8000914:	6862      	ldr	r2, [r4, #4]
 8000916:	d1dd      	bne.n	80008d4 <_malloc_r+0x8c>
 8000918:	f8c8 2000 	str.w	r2, [r8]
 800091c:	e7ec      	b.n	80008f8 <_malloc_r+0xb0>
 800091e:	4623      	mov	r3, r4
 8000920:	6864      	ldr	r4, [r4, #4]
 8000922:	e7ac      	b.n	800087e <_malloc_r+0x36>
 8000924:	4634      	mov	r4, r6
 8000926:	6876      	ldr	r6, [r6, #4]
 8000928:	e7b4      	b.n	8000894 <_malloc_r+0x4c>
 800092a:	4613      	mov	r3, r2
 800092c:	e7cc      	b.n	80008c8 <_malloc_r+0x80>
 800092e:	230c      	movs	r3, #12
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4638      	mov	r0, r7
 8000934:	f000 f80e 	bl	8000954 <__malloc_unlock>
 8000938:	e797      	b.n	800086a <_malloc_r+0x22>
 800093a:	6025      	str	r5, [r4, #0]
 800093c:	e7dc      	b.n	80008f8 <_malloc_r+0xb0>
 800093e:	605b      	str	r3, [r3, #4]
 8000940:	deff      	udf	#255	; 0xff
 8000942:	bf00      	nop
 8000944:	200001b4 	.word	0x200001b4

08000948 <__malloc_lock>:
 8000948:	4801      	ldr	r0, [pc, #4]	; (8000950 <__malloc_lock+0x8>)
 800094a:	f7ff bf0f 	b.w	800076c <__retarget_lock_acquire_recursive>
 800094e:	bf00      	nop
 8000950:	200001b0 	.word	0x200001b0

08000954 <__malloc_unlock>:
 8000954:	4801      	ldr	r0, [pc, #4]	; (800095c <__malloc_unlock+0x8>)
 8000956:	f7ff bf0a 	b.w	800076e <__retarget_lock_release_recursive>
 800095a:	bf00      	nop
 800095c:	200001b0 	.word	0x200001b0

08000960 <__ssputs_r>:
 8000960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000964:	688e      	ldr	r6, [r1, #8]
 8000966:	461f      	mov	r7, r3
 8000968:	42be      	cmp	r6, r7
 800096a:	680b      	ldr	r3, [r1, #0]
 800096c:	4682      	mov	sl, r0
 800096e:	460c      	mov	r4, r1
 8000970:	4690      	mov	r8, r2
 8000972:	d82c      	bhi.n	80009ce <__ssputs_r+0x6e>
 8000974:	898a      	ldrh	r2, [r1, #12]
 8000976:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800097a:	d026      	beq.n	80009ca <__ssputs_r+0x6a>
 800097c:	6965      	ldr	r5, [r4, #20]
 800097e:	6909      	ldr	r1, [r1, #16]
 8000980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000984:	eba3 0901 	sub.w	r9, r3, r1
 8000988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800098c:	1c7b      	adds	r3, r7, #1
 800098e:	444b      	add	r3, r9
 8000990:	106d      	asrs	r5, r5, #1
 8000992:	429d      	cmp	r5, r3
 8000994:	bf38      	it	cc
 8000996:	461d      	movcc	r5, r3
 8000998:	0553      	lsls	r3, r2, #21
 800099a:	d527      	bpl.n	80009ec <__ssputs_r+0x8c>
 800099c:	4629      	mov	r1, r5
 800099e:	f7ff ff53 	bl	8000848 <_malloc_r>
 80009a2:	4606      	mov	r6, r0
 80009a4:	b360      	cbz	r0, 8000a00 <__ssputs_r+0xa0>
 80009a6:	6921      	ldr	r1, [r4, #16]
 80009a8:	464a      	mov	r2, r9
 80009aa:	f000 faeb 	bl	8000f84 <memcpy>
 80009ae:	89a3      	ldrh	r3, [r4, #12]
 80009b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	81a3      	strh	r3, [r4, #12]
 80009ba:	6126      	str	r6, [r4, #16]
 80009bc:	6165      	str	r5, [r4, #20]
 80009be:	444e      	add	r6, r9
 80009c0:	eba5 0509 	sub.w	r5, r5, r9
 80009c4:	6026      	str	r6, [r4, #0]
 80009c6:	60a5      	str	r5, [r4, #8]
 80009c8:	463e      	mov	r6, r7
 80009ca:	42be      	cmp	r6, r7
 80009cc:	d900      	bls.n	80009d0 <__ssputs_r+0x70>
 80009ce:	463e      	mov	r6, r7
 80009d0:	6820      	ldr	r0, [r4, #0]
 80009d2:	4632      	mov	r2, r6
 80009d4:	4641      	mov	r1, r8
 80009d6:	f000 faab 	bl	8000f30 <memmove>
 80009da:	68a3      	ldr	r3, [r4, #8]
 80009dc:	1b9b      	subs	r3, r3, r6
 80009de:	60a3      	str	r3, [r4, #8]
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	4433      	add	r3, r6
 80009e4:	6023      	str	r3, [r4, #0]
 80009e6:	2000      	movs	r0, #0
 80009e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ec:	462a      	mov	r2, r5
 80009ee:	f000 fad7 	bl	8000fa0 <_realloc_r>
 80009f2:	4606      	mov	r6, r0
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d1e0      	bne.n	80009ba <__ssputs_r+0x5a>
 80009f8:	6921      	ldr	r1, [r4, #16]
 80009fa:	4650      	mov	r0, sl
 80009fc:	f7ff feb8 	bl	8000770 <_free_r>
 8000a00:	230c      	movs	r3, #12
 8000a02:	f8ca 3000 	str.w	r3, [sl]
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0c:	81a3      	strh	r3, [r4, #12]
 8000a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a12:	e7e9      	b.n	80009e8 <__ssputs_r+0x88>

08000a14 <_svfiprintf_r>:
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a18:	4698      	mov	r8, r3
 8000a1a:	898b      	ldrh	r3, [r1, #12]
 8000a1c:	061b      	lsls	r3, r3, #24
 8000a1e:	b09d      	sub	sp, #116	; 0x74
 8000a20:	4607      	mov	r7, r0
 8000a22:	460d      	mov	r5, r1
 8000a24:	4614      	mov	r4, r2
 8000a26:	d50e      	bpl.n	8000a46 <_svfiprintf_r+0x32>
 8000a28:	690b      	ldr	r3, [r1, #16]
 8000a2a:	b963      	cbnz	r3, 8000a46 <_svfiprintf_r+0x32>
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	f7ff ff0b 	bl	8000848 <_malloc_r>
 8000a32:	6028      	str	r0, [r5, #0]
 8000a34:	6128      	str	r0, [r5, #16]
 8000a36:	b920      	cbnz	r0, 8000a42 <_svfiprintf_r+0x2e>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	e0d0      	b.n	8000be4 <_svfiprintf_r+0x1d0>
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	616b      	str	r3, [r5, #20]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9309      	str	r3, [sp, #36]	; 0x24
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a54:	2330      	movs	r3, #48	; 0x30
 8000a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000bfc <_svfiprintf_r+0x1e8>
 8000a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a5e:	f04f 0901 	mov.w	r9, #1
 8000a62:	4623      	mov	r3, r4
 8000a64:	469a      	mov	sl, r3
 8000a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a6a:	b10a      	cbz	r2, 8000a70 <_svfiprintf_r+0x5c>
 8000a6c:	2a25      	cmp	r2, #37	; 0x25
 8000a6e:	d1f9      	bne.n	8000a64 <_svfiprintf_r+0x50>
 8000a70:	ebba 0b04 	subs.w	fp, sl, r4
 8000a74:	d00b      	beq.n	8000a8e <_svfiprintf_r+0x7a>
 8000a76:	465b      	mov	r3, fp
 8000a78:	4622      	mov	r2, r4
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	f7ff ff6f 	bl	8000960 <__ssputs_r>
 8000a82:	3001      	adds	r0, #1
 8000a84:	f000 80a9 	beq.w	8000bda <_svfiprintf_r+0x1c6>
 8000a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a8a:	445a      	add	r2, fp
 8000a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8000a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 80a1 	beq.w	8000bda <_svfiprintf_r+0x1c6>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000aa2:	f10a 0a01 	add.w	sl, sl, #1
 8000aa6:	9304      	str	r3, [sp, #16]
 8000aa8:	9307      	str	r3, [sp, #28]
 8000aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000aae:	931a      	str	r3, [sp, #104]	; 0x68
 8000ab0:	4654      	mov	r4, sl
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ab8:	4850      	ldr	r0, [pc, #320]	; (8000bfc <_svfiprintf_r+0x1e8>)
 8000aba:	f7ff fb99 	bl	80001f0 <memchr>
 8000abe:	9a04      	ldr	r2, [sp, #16]
 8000ac0:	b9d8      	cbnz	r0, 8000afa <_svfiprintf_r+0xe6>
 8000ac2:	06d0      	lsls	r0, r2, #27
 8000ac4:	bf44      	itt	mi
 8000ac6:	2320      	movmi	r3, #32
 8000ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000acc:	0711      	lsls	r1, r2, #28
 8000ace:	bf44      	itt	mi
 8000ad0:	232b      	movmi	r3, #43	; 0x2b
 8000ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8000ada:	2b2a      	cmp	r3, #42	; 0x2a
 8000adc:	d015      	beq.n	8000b0a <_svfiprintf_r+0xf6>
 8000ade:	9a07      	ldr	r2, [sp, #28]
 8000ae0:	4654      	mov	r4, sl
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f04f 0c0a 	mov.w	ip, #10
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000aee:	3b30      	subs	r3, #48	; 0x30
 8000af0:	2b09      	cmp	r3, #9
 8000af2:	d94d      	bls.n	8000b90 <_svfiprintf_r+0x17c>
 8000af4:	b1b0      	cbz	r0, 8000b24 <_svfiprintf_r+0x110>
 8000af6:	9207      	str	r2, [sp, #28]
 8000af8:	e014      	b.n	8000b24 <_svfiprintf_r+0x110>
 8000afa:	eba0 0308 	sub.w	r3, r0, r8
 8000afe:	fa09 f303 	lsl.w	r3, r9, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	9304      	str	r3, [sp, #16]
 8000b06:	46a2      	mov	sl, r4
 8000b08:	e7d2      	b.n	8000ab0 <_svfiprintf_r+0x9c>
 8000b0a:	9b03      	ldr	r3, [sp, #12]
 8000b0c:	1d19      	adds	r1, r3, #4
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	9103      	str	r1, [sp, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfbb      	ittet	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	f042 0202 	orrlt.w	r2, r2, #2
 8000b1c:	9307      	strge	r3, [sp, #28]
 8000b1e:	9307      	strlt	r3, [sp, #28]
 8000b20:	bfb8      	it	lt
 8000b22:	9204      	strlt	r2, [sp, #16]
 8000b24:	7823      	ldrb	r3, [r4, #0]
 8000b26:	2b2e      	cmp	r3, #46	; 0x2e
 8000b28:	d10c      	bne.n	8000b44 <_svfiprintf_r+0x130>
 8000b2a:	7863      	ldrb	r3, [r4, #1]
 8000b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b2e:	d134      	bne.n	8000b9a <_svfiprintf_r+0x186>
 8000b30:	9b03      	ldr	r3, [sp, #12]
 8000b32:	1d1a      	adds	r2, r3, #4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	9203      	str	r2, [sp, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bfb8      	it	lt
 8000b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b40:	3402      	adds	r4, #2
 8000b42:	9305      	str	r3, [sp, #20]
 8000b44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000c0c <_svfiprintf_r+0x1f8>
 8000b48:	7821      	ldrb	r1, [r4, #0]
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	4650      	mov	r0, sl
 8000b4e:	f7ff fb4f 	bl	80001f0 <memchr>
 8000b52:	b138      	cbz	r0, 8000b64 <_svfiprintf_r+0x150>
 8000b54:	9b04      	ldr	r3, [sp, #16]
 8000b56:	eba0 000a 	sub.w	r0, r0, sl
 8000b5a:	2240      	movs	r2, #64	; 0x40
 8000b5c:	4082      	lsls	r2, r0
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	3401      	adds	r4, #1
 8000b62:	9304      	str	r3, [sp, #16]
 8000b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b68:	4825      	ldr	r0, [pc, #148]	; (8000c00 <_svfiprintf_r+0x1ec>)
 8000b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b6e:	2206      	movs	r2, #6
 8000b70:	f7ff fb3e 	bl	80001f0 <memchr>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d038      	beq.n	8000bea <_svfiprintf_r+0x1d6>
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <_svfiprintf_r+0x1f0>)
 8000b7a:	bb1b      	cbnz	r3, 8000bc4 <_svfiprintf_r+0x1b0>
 8000b7c:	9b03      	ldr	r3, [sp, #12]
 8000b7e:	3307      	adds	r3, #7
 8000b80:	f023 0307 	bic.w	r3, r3, #7
 8000b84:	3308      	adds	r3, #8
 8000b86:	9303      	str	r3, [sp, #12]
 8000b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b8a:	4433      	add	r3, r6
 8000b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b8e:	e768      	b.n	8000a62 <_svfiprintf_r+0x4e>
 8000b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b94:	460c      	mov	r4, r1
 8000b96:	2001      	movs	r0, #1
 8000b98:	e7a6      	b.n	8000ae8 <_svfiprintf_r+0xd4>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	3401      	adds	r4, #1
 8000b9e:	9305      	str	r3, [sp, #20]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 0c0a 	mov.w	ip, #10
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bac:	3a30      	subs	r2, #48	; 0x30
 8000bae:	2a09      	cmp	r2, #9
 8000bb0:	d903      	bls.n	8000bba <_svfiprintf_r+0x1a6>
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0c6      	beq.n	8000b44 <_svfiprintf_r+0x130>
 8000bb6:	9105      	str	r1, [sp, #20]
 8000bb8:	e7c4      	b.n	8000b44 <_svfiprintf_r+0x130>
 8000bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e7f0      	b.n	8000ba6 <_svfiprintf_r+0x192>
 8000bc4:	ab03      	add	r3, sp, #12
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	462a      	mov	r2, r5
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <_svfiprintf_r+0x1f4>)
 8000bcc:	a904      	add	r1, sp, #16
 8000bce:	4638      	mov	r0, r7
 8000bd0:	f3af 8000 	nop.w
 8000bd4:	1c42      	adds	r2, r0, #1
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	d1d6      	bne.n	8000b88 <_svfiprintf_r+0x174>
 8000bda:	89ab      	ldrh	r3, [r5, #12]
 8000bdc:	065b      	lsls	r3, r3, #25
 8000bde:	f53f af2d 	bmi.w	8000a3c <_svfiprintf_r+0x28>
 8000be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000be4:	b01d      	add	sp, #116	; 0x74
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bea:	ab03      	add	r3, sp, #12
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	462a      	mov	r2, r5
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <_svfiprintf_r+0x1f4>)
 8000bf2:	a904      	add	r1, sp, #16
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	f000 f879 	bl	8000cec <_printf_i>
 8000bfa:	e7eb      	b.n	8000bd4 <_svfiprintf_r+0x1c0>
 8000bfc:	0800115b 	.word	0x0800115b
 8000c00:	08001165 	.word	0x08001165
 8000c04:	00000000 	.word	0x00000000
 8000c08:	08000961 	.word	0x08000961
 8000c0c:	08001161 	.word	0x08001161

08000c10 <_printf_common>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	4616      	mov	r6, r2
 8000c16:	4699      	mov	r9, r3
 8000c18:	688a      	ldr	r2, [r1, #8]
 8000c1a:	690b      	ldr	r3, [r1, #16]
 8000c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bfb8      	it	lt
 8000c24:	4613      	movlt	r3, r2
 8000c26:	6033      	str	r3, [r6, #0]
 8000c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c2c:	4607      	mov	r7, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	b10a      	cbz	r2, 8000c36 <_printf_common+0x26>
 8000c32:	3301      	adds	r3, #1
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	0699      	lsls	r1, r3, #26
 8000c3a:	bf42      	ittt	mi
 8000c3c:	6833      	ldrmi	r3, [r6, #0]
 8000c3e:	3302      	addmi	r3, #2
 8000c40:	6033      	strmi	r3, [r6, #0]
 8000c42:	6825      	ldr	r5, [r4, #0]
 8000c44:	f015 0506 	ands.w	r5, r5, #6
 8000c48:	d106      	bne.n	8000c58 <_printf_common+0x48>
 8000c4a:	f104 0a19 	add.w	sl, r4, #25
 8000c4e:	68e3      	ldr	r3, [r4, #12]
 8000c50:	6832      	ldr	r2, [r6, #0]
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	dc26      	bgt.n	8000ca6 <_printf_common+0x96>
 8000c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c5c:	1e13      	subs	r3, r2, #0
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	bf18      	it	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	0692      	lsls	r2, r2, #26
 8000c66:	d42b      	bmi.n	8000cc0 <_printf_common+0xb0>
 8000c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	4638      	mov	r0, r7
 8000c70:	47c0      	blx	r8
 8000c72:	3001      	adds	r0, #1
 8000c74:	d01e      	beq.n	8000cb4 <_printf_common+0xa4>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	6922      	ldr	r2, [r4, #16]
 8000c7a:	f003 0306 	and.w	r3, r3, #6
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf02      	ittt	eq
 8000c82:	68e5      	ldreq	r5, [r4, #12]
 8000c84:	6833      	ldreq	r3, [r6, #0]
 8000c86:	1aed      	subeq	r5, r5, r3
 8000c88:	68a3      	ldr	r3, [r4, #8]
 8000c8a:	bf0c      	ite	eq
 8000c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c90:	2500      	movne	r5, #0
 8000c92:	4293      	cmp	r3, r2
 8000c94:	bfc4      	itt	gt
 8000c96:	1a9b      	subgt	r3, r3, r2
 8000c98:	18ed      	addgt	r5, r5, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	341a      	adds	r4, #26
 8000c9e:	42b5      	cmp	r5, r6
 8000ca0:	d11a      	bne.n	8000cd8 <_printf_common+0xc8>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e008      	b.n	8000cb8 <_printf_common+0xa8>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	4652      	mov	r2, sl
 8000caa:	4649      	mov	r1, r9
 8000cac:	4638      	mov	r0, r7
 8000cae:	47c0      	blx	r8
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d103      	bne.n	8000cbc <_printf_common+0xac>
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	3501      	adds	r5, #1
 8000cbe:	e7c6      	b.n	8000c4e <_printf_common+0x3e>
 8000cc0:	18e1      	adds	r1, r4, r3
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	2030      	movs	r0, #48	; 0x30
 8000cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cca:	4422      	add	r2, r4
 8000ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	e7c7      	b.n	8000c68 <_printf_common+0x58>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4622      	mov	r2, r4
 8000cdc:	4649      	mov	r1, r9
 8000cde:	4638      	mov	r0, r7
 8000ce0:	47c0      	blx	r8
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	d0e6      	beq.n	8000cb4 <_printf_common+0xa4>
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	e7d9      	b.n	8000c9e <_printf_common+0x8e>
	...

08000cec <_printf_i>:
 8000cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	7e0f      	ldrb	r7, [r1, #24]
 8000cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000cf4:	2f78      	cmp	r7, #120	; 0x78
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	4680      	mov	r8, r0
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d02:	d807      	bhi.n	8000d14 <_printf_i+0x28>
 8000d04:	2f62      	cmp	r7, #98	; 0x62
 8000d06:	d80a      	bhi.n	8000d1e <_printf_i+0x32>
 8000d08:	2f00      	cmp	r7, #0
 8000d0a:	f000 80d4 	beq.w	8000eb6 <_printf_i+0x1ca>
 8000d0e:	2f58      	cmp	r7, #88	; 0x58
 8000d10:	f000 80c0 	beq.w	8000e94 <_printf_i+0x1a8>
 8000d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d1c:	e03a      	b.n	8000d94 <_printf_i+0xa8>
 8000d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d22:	2b15      	cmp	r3, #21
 8000d24:	d8f6      	bhi.n	8000d14 <_printf_i+0x28>
 8000d26:	a101      	add	r1, pc, #4	; (adr r1, 8000d2c <_printf_i+0x40>)
 8000d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d2c:	08000d85 	.word	0x08000d85
 8000d30:	08000d99 	.word	0x08000d99
 8000d34:	08000d15 	.word	0x08000d15
 8000d38:	08000d15 	.word	0x08000d15
 8000d3c:	08000d15 	.word	0x08000d15
 8000d40:	08000d15 	.word	0x08000d15
 8000d44:	08000d99 	.word	0x08000d99
 8000d48:	08000d15 	.word	0x08000d15
 8000d4c:	08000d15 	.word	0x08000d15
 8000d50:	08000d15 	.word	0x08000d15
 8000d54:	08000d15 	.word	0x08000d15
 8000d58:	08000e9d 	.word	0x08000e9d
 8000d5c:	08000dc5 	.word	0x08000dc5
 8000d60:	08000e57 	.word	0x08000e57
 8000d64:	08000d15 	.word	0x08000d15
 8000d68:	08000d15 	.word	0x08000d15
 8000d6c:	08000ebf 	.word	0x08000ebf
 8000d70:	08000d15 	.word	0x08000d15
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000d15 	.word	0x08000d15
 8000d7c:	08000d15 	.word	0x08000d15
 8000d80:	08000e5f 	.word	0x08000e5f
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	1d1a      	adds	r2, r3, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	602a      	str	r2, [r5, #0]
 8000d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d94:	2301      	movs	r3, #1
 8000d96:	e09f      	b.n	8000ed8 <_printf_i+0x1ec>
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	682b      	ldr	r3, [r5, #0]
 8000d9c:	0607      	lsls	r7, r0, #24
 8000d9e:	f103 0104 	add.w	r1, r3, #4
 8000da2:	6029      	str	r1, [r5, #0]
 8000da4:	d501      	bpl.n	8000daa <_printf_i+0xbe>
 8000da6:	681e      	ldr	r6, [r3, #0]
 8000da8:	e003      	b.n	8000db2 <_printf_i+0xc6>
 8000daa:	0646      	lsls	r6, r0, #25
 8000dac:	d5fb      	bpl.n	8000da6 <_printf_i+0xba>
 8000dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	da03      	bge.n	8000dbe <_printf_i+0xd2>
 8000db6:	232d      	movs	r3, #45	; 0x2d
 8000db8:	4276      	negs	r6, r6
 8000dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dbe:	485a      	ldr	r0, [pc, #360]	; (8000f28 <_printf_i+0x23c>)
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	e012      	b.n	8000dea <_printf_i+0xfe>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	6820      	ldr	r0, [r4, #0]
 8000dc8:	1d19      	adds	r1, r3, #4
 8000dca:	6029      	str	r1, [r5, #0]
 8000dcc:	0605      	lsls	r5, r0, #24
 8000dce:	d501      	bpl.n	8000dd4 <_printf_i+0xe8>
 8000dd0:	681e      	ldr	r6, [r3, #0]
 8000dd2:	e002      	b.n	8000dda <_printf_i+0xee>
 8000dd4:	0641      	lsls	r1, r0, #25
 8000dd6:	d5fb      	bpl.n	8000dd0 <_printf_i+0xe4>
 8000dd8:	881e      	ldrh	r6, [r3, #0]
 8000dda:	4853      	ldr	r0, [pc, #332]	; (8000f28 <_printf_i+0x23c>)
 8000ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8000dde:	bf0c      	ite	eq
 8000de0:	2308      	moveq	r3, #8
 8000de2:	230a      	movne	r3, #10
 8000de4:	2100      	movs	r1, #0
 8000de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dea:	6865      	ldr	r5, [r4, #4]
 8000dec:	60a5      	str	r5, [r4, #8]
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	bfa2      	ittt	ge
 8000df2:	6821      	ldrge	r1, [r4, #0]
 8000df4:	f021 0104 	bicge.w	r1, r1, #4
 8000df8:	6021      	strge	r1, [r4, #0]
 8000dfa:	b90e      	cbnz	r6, 8000e00 <_printf_i+0x114>
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d04b      	beq.n	8000e98 <_printf_i+0x1ac>
 8000e00:	4615      	mov	r5, r2
 8000e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e06:	fb03 6711 	mls	r7, r3, r1, r6
 8000e0a:	5dc7      	ldrb	r7, [r0, r7]
 8000e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e10:	4637      	mov	r7, r6
 8000e12:	42bb      	cmp	r3, r7
 8000e14:	460e      	mov	r6, r1
 8000e16:	d9f4      	bls.n	8000e02 <_printf_i+0x116>
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d10b      	bne.n	8000e34 <_printf_i+0x148>
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	07de      	lsls	r6, r3, #31
 8000e20:	d508      	bpl.n	8000e34 <_printf_i+0x148>
 8000e22:	6923      	ldr	r3, [r4, #16]
 8000e24:	6861      	ldr	r1, [r4, #4]
 8000e26:	4299      	cmp	r1, r3
 8000e28:	bfde      	ittt	le
 8000e2a:	2330      	movle	r3, #48	; 0x30
 8000e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e34:	1b52      	subs	r2, r2, r5
 8000e36:	6122      	str	r2, [r4, #16]
 8000e38:	f8cd a000 	str.w	sl, [sp]
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	aa03      	add	r2, sp, #12
 8000e40:	4621      	mov	r1, r4
 8000e42:	4640      	mov	r0, r8
 8000e44:	f7ff fee4 	bl	8000c10 <_printf_common>
 8000e48:	3001      	adds	r0, #1
 8000e4a:	d14a      	bne.n	8000ee2 <_printf_i+0x1f6>
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	b004      	add	sp, #16
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6023      	str	r3, [r4, #0]
 8000e5e:	4833      	ldr	r0, [pc, #204]	; (8000f2c <_printf_i+0x240>)
 8000e60:	2778      	movs	r7, #120	; 0x78
 8000e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	6829      	ldr	r1, [r5, #0]
 8000e6a:	061f      	lsls	r7, r3, #24
 8000e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e70:	d402      	bmi.n	8000e78 <_printf_i+0x18c>
 8000e72:	065f      	lsls	r7, r3, #25
 8000e74:	bf48      	it	mi
 8000e76:	b2b6      	uxthmi	r6, r6
 8000e78:	07df      	lsls	r7, r3, #31
 8000e7a:	bf48      	it	mi
 8000e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8000e80:	6029      	str	r1, [r5, #0]
 8000e82:	bf48      	it	mi
 8000e84:	6023      	strmi	r3, [r4, #0]
 8000e86:	b91e      	cbnz	r6, 8000e90 <_printf_i+0x1a4>
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	f023 0320 	bic.w	r3, r3, #32
 8000e8e:	6023      	str	r3, [r4, #0]
 8000e90:	2310      	movs	r3, #16
 8000e92:	e7a7      	b.n	8000de4 <_printf_i+0xf8>
 8000e94:	4824      	ldr	r0, [pc, #144]	; (8000f28 <_printf_i+0x23c>)
 8000e96:	e7e4      	b.n	8000e62 <_printf_i+0x176>
 8000e98:	4615      	mov	r5, r2
 8000e9a:	e7bd      	b.n	8000e18 <_printf_i+0x12c>
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	6826      	ldr	r6, [r4, #0]
 8000ea0:	6961      	ldr	r1, [r4, #20]
 8000ea2:	1d18      	adds	r0, r3, #4
 8000ea4:	6028      	str	r0, [r5, #0]
 8000ea6:	0635      	lsls	r5, r6, #24
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	d501      	bpl.n	8000eb0 <_printf_i+0x1c4>
 8000eac:	6019      	str	r1, [r3, #0]
 8000eae:	e002      	b.n	8000eb6 <_printf_i+0x1ca>
 8000eb0:	0670      	lsls	r0, r6, #25
 8000eb2:	d5fb      	bpl.n	8000eac <_printf_i+0x1c0>
 8000eb4:	8019      	strh	r1, [r3, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	6123      	str	r3, [r4, #16]
 8000eba:	4615      	mov	r5, r2
 8000ebc:	e7bc      	b.n	8000e38 <_printf_i+0x14c>
 8000ebe:	682b      	ldr	r3, [r5, #0]
 8000ec0:	1d1a      	adds	r2, r3, #4
 8000ec2:	602a      	str	r2, [r5, #0]
 8000ec4:	681d      	ldr	r5, [r3, #0]
 8000ec6:	6862      	ldr	r2, [r4, #4]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f7ff f990 	bl	80001f0 <memchr>
 8000ed0:	b108      	cbz	r0, 8000ed6 <_printf_i+0x1ea>
 8000ed2:	1b40      	subs	r0, r0, r5
 8000ed4:	6060      	str	r0, [r4, #4]
 8000ed6:	6863      	ldr	r3, [r4, #4]
 8000ed8:	6123      	str	r3, [r4, #16]
 8000eda:	2300      	movs	r3, #0
 8000edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ee0:	e7aa      	b.n	8000e38 <_printf_i+0x14c>
 8000ee2:	6923      	ldr	r3, [r4, #16]
 8000ee4:	462a      	mov	r2, r5
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	4640      	mov	r0, r8
 8000eea:	47d0      	blx	sl
 8000eec:	3001      	adds	r0, #1
 8000eee:	d0ad      	beq.n	8000e4c <_printf_i+0x160>
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	079b      	lsls	r3, r3, #30
 8000ef4:	d413      	bmi.n	8000f1e <_printf_i+0x232>
 8000ef6:	68e0      	ldr	r0, [r4, #12]
 8000ef8:	9b03      	ldr	r3, [sp, #12]
 8000efa:	4298      	cmp	r0, r3
 8000efc:	bfb8      	it	lt
 8000efe:	4618      	movlt	r0, r3
 8000f00:	e7a6      	b.n	8000e50 <_printf_i+0x164>
 8000f02:	2301      	movs	r3, #1
 8000f04:	4632      	mov	r2, r6
 8000f06:	4649      	mov	r1, r9
 8000f08:	4640      	mov	r0, r8
 8000f0a:	47d0      	blx	sl
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	d09d      	beq.n	8000e4c <_printf_i+0x160>
 8000f10:	3501      	adds	r5, #1
 8000f12:	68e3      	ldr	r3, [r4, #12]
 8000f14:	9903      	ldr	r1, [sp, #12]
 8000f16:	1a5b      	subs	r3, r3, r1
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	dcf2      	bgt.n	8000f02 <_printf_i+0x216>
 8000f1c:	e7eb      	b.n	8000ef6 <_printf_i+0x20a>
 8000f1e:	2500      	movs	r5, #0
 8000f20:	f104 0619 	add.w	r6, r4, #25
 8000f24:	e7f5      	b.n	8000f12 <_printf_i+0x226>
 8000f26:	bf00      	nop
 8000f28:	0800116c 	.word	0x0800116c
 8000f2c:	0800117d 	.word	0x0800117d

08000f30 <memmove>:
 8000f30:	4288      	cmp	r0, r1
 8000f32:	b510      	push	{r4, lr}
 8000f34:	eb01 0402 	add.w	r4, r1, r2
 8000f38:	d902      	bls.n	8000f40 <memmove+0x10>
 8000f3a:	4284      	cmp	r4, r0
 8000f3c:	4623      	mov	r3, r4
 8000f3e:	d807      	bhi.n	8000f50 <memmove+0x20>
 8000f40:	1e43      	subs	r3, r0, #1
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	d008      	beq.n	8000f58 <memmove+0x28>
 8000f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f4e:	e7f8      	b.n	8000f42 <memmove+0x12>
 8000f50:	4402      	add	r2, r0
 8000f52:	4601      	mov	r1, r0
 8000f54:	428a      	cmp	r2, r1
 8000f56:	d100      	bne.n	8000f5a <memmove+0x2a>
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f62:	e7f7      	b.n	8000f54 <memmove+0x24>

08000f64 <_sbrk_r>:
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d06      	ldr	r5, [pc, #24]	; (8000f80 <_sbrk_r+0x1c>)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	602b      	str	r3, [r5, #0]
 8000f70:	f7ff f9ee 	bl	8000350 <_sbrk>
 8000f74:	1c43      	adds	r3, r0, #1
 8000f76:	d102      	bne.n	8000f7e <_sbrk_r+0x1a>
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	b103      	cbz	r3, 8000f7e <_sbrk_r+0x1a>
 8000f7c:	6023      	str	r3, [r4, #0]
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	200001ac 	.word	0x200001ac

08000f84 <memcpy>:
 8000f84:	440a      	add	r2, r1
 8000f86:	4291      	cmp	r1, r2
 8000f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f8c:	d100      	bne.n	8000f90 <memcpy+0xc>
 8000f8e:	4770      	bx	lr
 8000f90:	b510      	push	{r4, lr}
 8000f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f9a:	4291      	cmp	r1, r2
 8000f9c:	d1f9      	bne.n	8000f92 <memcpy+0xe>
 8000f9e:	bd10      	pop	{r4, pc}

08000fa0 <_realloc_r>:
 8000fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa4:	4680      	mov	r8, r0
 8000fa6:	4614      	mov	r4, r2
 8000fa8:	460e      	mov	r6, r1
 8000faa:	b921      	cbnz	r1, 8000fb6 <_realloc_r+0x16>
 8000fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	f7ff bc49 	b.w	8000848 <_malloc_r>
 8000fb6:	b92a      	cbnz	r2, 8000fc4 <_realloc_r+0x24>
 8000fb8:	f7ff fbda 	bl	8000770 <_free_r>
 8000fbc:	4625      	mov	r5, r4
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc4:	f000 f81b 	bl	8000ffe <_malloc_usable_size_r>
 8000fc8:	4284      	cmp	r4, r0
 8000fca:	4607      	mov	r7, r0
 8000fcc:	d802      	bhi.n	8000fd4 <_realloc_r+0x34>
 8000fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000fd2:	d812      	bhi.n	8000ffa <_realloc_r+0x5a>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	f7ff fc36 	bl	8000848 <_malloc_r>
 8000fdc:	4605      	mov	r5, r0
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d0ed      	beq.n	8000fbe <_realloc_r+0x1e>
 8000fe2:	42bc      	cmp	r4, r7
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	4631      	mov	r1, r6
 8000fe8:	bf28      	it	cs
 8000fea:	463a      	movcs	r2, r7
 8000fec:	f7ff ffca 	bl	8000f84 <memcpy>
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	f7ff fbbc 	bl	8000770 <_free_r>
 8000ff8:	e7e1      	b.n	8000fbe <_realloc_r+0x1e>
 8000ffa:	4635      	mov	r5, r6
 8000ffc:	e7df      	b.n	8000fbe <_realloc_r+0x1e>

08000ffe <_malloc_usable_size_r>:
 8000ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001002:	1f18      	subs	r0, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	bfbc      	itt	lt
 8001008:	580b      	ldrlt	r3, [r1, r0]
 800100a:	18c0      	addlt	r0, r0, r3
 800100c:	4770      	bx	lr
	...

08001010 <_init>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr

0800101c <_fini>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr
